{"version":3,"sources":["components/Todo.js","components/AddTodo.js","components/TodoContext.js","components/TodoList.js","components/Nav.js","components/StatusTodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","index","todo","getComplete","remTodo","className","id","type","onClick","style","textDecoration","isCompleted","text","AddTodo","updateTodoList","useState","newTodo","getNewTodo","onSubmit","e","placeholder","value","onChange","target","TodoContext","createContext","TodoProvider","props","todos","getTodos","Provider","children","TodoList","useContext","getCompleteTodo","newArr","removeTodo","temArr","splice","map","key","preventDefault","prevTodos","Nav","height","backgroundColor","color","display","justifyContent","alignItems","StatusTodoList","comTodos","filter","notComTodos","statusStyles","holeStyle","padding","ul","listStyle","margin","h3","borderRadius","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6813ab2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Todo = ({ index, todo, getComplete, remTodo }) => {\r\n  return (\r\n    <div className=\"todo\" id={index}>\r\n      <input type=\"checkbox\" onClick={() => getComplete(index)} />\r\n      <p style={{ textDecoration: todo.isCompleted ? 'line-through' : '' }}>\r\n        {todo.text}\r\n      </p>\r\n\r\n      <button onClick={() => remTodo(index)}>X</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport const AddTodo = ({ updateTodoList }) => {\r\n  const [newTodo, getNewTodo] = useState('');\r\n  const getTodo = e => {\r\n    getNewTodo(e.target.value);\r\n  };\r\n  return (\r\n    <form\r\n      className=\"form\"\r\n      onSubmit={e => updateTodoList(e, getNewTodo, newTodo)}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter new Todo\"\r\n        value={newTodo}\r\n        onChange={getTodo}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, createContext } from 'react';\r\n\r\nexport const TodoContext = createContext();\r\n\r\nexport const TodoProvider = props => {\r\n  const [todos, getTodos] = useState([\r\n    {\r\n      text: 'explore Reactjs hooks',\r\n      isCompleted: false\r\n    },\r\n    {\r\n      text: 'explore Reactjs',\r\n      isCompleted: false\r\n    },\r\n    {\r\n      text: 'explore Reactjs hooks some more',\r\n      isCompleted: false\r\n    },\r\n    {\r\n      text: 'explore Reactjs context',\r\n      isCompleted: false\r\n    }\r\n  ]);\r\n\r\n  return (\r\n    <TodoContext.Provider value={[todos, getTodos]}>\r\n      {props.children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { Todo } from './Todo';\r\nimport { AddTodo } from './AddTodo';\r\nimport { TodoContext } from './TodoContext';\r\nexport const TodoList = () => {\r\n  const [todos, getTodos] = useContext(TodoContext);\r\n  const getCompleteTodo = index => {\r\n    const newArr = [...todos];\r\n    newArr[index].isCompleted = !newArr[index].isCompleted;\r\n    getTodos(newArr);\r\n  };\r\n\r\n  const removeTodo = index => {\r\n    const temArr = [...todos];\r\n    temArr.splice(index, 1);\r\n    getTodos(temArr);\r\n  };\r\n\r\n  const getTodosfhome = (e, getNewTodo, newTodo) => {\r\n    e.preventDefault();\r\n\r\n    if (newTodo === '') return;\r\n    getTodos(prevTodos => {\r\n      return [...prevTodos, { text: newTodo, isCompleted: false }];\r\n    });\r\n    getNewTodo('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoList\">\r\n      {todos.map((todo, index) => (\r\n        <Todo\r\n          key={index}\r\n          index={index}\r\n          todo={todo}\r\n          getComplete={getCompleteTodo}\r\n          remTodo={removeTodo}\r\n        />\r\n      ))}\r\n      <AddTodo updateTodoList={getTodosfhome} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import { TodoContext } from './TodoContext';\r\nconst Nav = () => {\r\n  // const [todos] = useContext(TodoContext);\r\n  const navStyles = {\r\n    nav: {\r\n      height: '5rem',\r\n      backgroundColor: 'rgb(19, 70, 128)',\r\n      color: '#fff',\r\n      display: 'flex',\r\n      justifyContent: 'space-around',\r\n      alignItems: 'center'\r\n    },\r\n    color: {\r\n      color: '#fff',\r\n      textDecoration: 'none'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav style={navStyles.nav}>\r\n      {/* <Link style={navStyles.color} to=\"/\"> */}\r\n      <h2>SenthilKannan</h2>\r\n      {/* </Link> */}\r\n      <ul>\r\n        <li>\r\n          {/* <Link style={navStyles.color} to=\"/login\"> */}\r\n          Login\r\n          {/* </Link> */}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useContext } from 'react';\r\nimport { TodoContext } from './TodoContext';\r\n\r\nexport const StatusTodoList = () => {\r\n  const [todos] = useContext(TodoContext);\r\n  const comTodos = todos.filter(todo => todo.isCompleted);\r\n  const notComTodos = todos.filter(todo => !todo.isCompleted);\r\n  const statusStyles = {\r\n    holeStyle: {\r\n      backgroundColor: 'rgba(25, 203, 216, 0.923)',\r\n      padding: '1rem 0rem'\r\n    },\r\n    ul: {\r\n      display: 'flex',\r\n      justifyContent: 'space-around',\r\n      listStyle: 'none',\r\n      padding: '0',\r\n      margin: '0'\r\n    },\r\n    h3: {\r\n      color: '#555',\r\n      backgroundColor: '#FFD4D4',\r\n      padding: '0.5rem 2rem',\r\n      borderRadius: '1rem'\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"status-todo-list\" style={statusStyles.holeStyle}>\r\n      <ul style={statusStyles.ul}>\r\n        <li>\r\n          <h3 style={statusStyles.h3}>No Of Todos : {todos.length}</h3>\r\n        </li>\r\n        <li>\r\n          <h3 style={statusStyles.h3}>\r\n            No Of Todos Completed : {comTodos.length}\r\n          </h3>\r\n        </li>\r\n        <li>\r\n          <h3 style={statusStyles.h3}>\r\n            No Of Todos Not Completed : {notComTodos.length}\r\n          </h3>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { TodoList } from './components/TodoList';\nimport Nav from './components/Nav';\nimport { TodoProvider } from './components/TodoContext';\nimport { StatusTodoList } from './components/StatusTodoList';\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <div className=\"App\">\n        <Nav />\n        <StatusTodoList />\n        <TodoList />\n      </div>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}